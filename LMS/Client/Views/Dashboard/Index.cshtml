@model Client.ViewModels.Users.DashboardUserVM
@{
    ViewData["Title"] = "Dashboard";
    Layout = "_DashboardLayout";
}

@*JUDUL*@
<h1 style="color:white;">Dashboard</h1>
@*Main Content*@
@if (User.IsInRole("Teacher"))
{
    <div class="row">
        <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Classroom</p>
                                <h5 class="font-weight-bolder">
                                    @Model.Teacher.TotalClassroom
                                </h5>
                                <p class="mb-0">
                                    Managed classroom
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-primary shadow-primary text-center rounded-circle">
                                <i class="ni ni-hat-3 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Task</p>
                                <h5 class="font-weight-bolder">
                                    @Model.Teacher.TotalAssignment
                                </h5>
                                <p class="mb-0">
                                    Total of task created
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-warning shadow-danger text-center rounded-circle">
                                <i class="ni ni-archive-2 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Graded</p>
                                <h5 class="font-weight-bolder">
                                    @Model.Teacher.TotalGraded
                                </h5>
                                <p class="mb-0">
                                    Task has been graded
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-success shadow-success text-center rounded-circle">
                                <i class="fa fa-check text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-sm-6">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Not Graded</p>
                                <h5 class="font-weight-bolder">
                                    @Model.Teacher.TotalNotGraded
                                </h5>
                                <p class="mb-0">
                                    Task submitted not graded
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-danger shadow-warning text-center rounded-circle">
                                <i class="fa fa-times text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row mt-4">
        <div class="col-lg-7 mb-lg-0 mb-4">
            <div class="card z-index-2 h-100">
                <div class="card-header pb-0 pt-3 bg-transparent">
                    <h6 class="text-capitalize">Average Grade Classroom</h6>
                </div>
                <div class="card-body p-3">
                    <div class="chart chart-container" style="position: relative;">
                        @if (Model.Teacher.AverageGrade.Any())
                        {
                            <canvas id="chart-average-grade" class="chart-canvas"></canvas>
                        }
                        else
                        {
                            <h3>No recent grade</h3>
                        }
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-5">
            <div class="card z-index-2 h-100">
                <div class="card-header pb-0 pt-3 bg-transparent">
                    <h6 class="text-capitalize">Total of Classroom Passing Grade</h6>
                </div>
                <div class="card-body p-3">
                    <div class="chart chart-container" style="position: relative;">
                        @if (Model.Teacher.AverageGrade.Any())
                        {
                            <canvas id="chart-passed-avg-grade" class="chart-canvas"></canvas>
                        }
                        else
                        {
                            <h3>No recent grade</h3>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@if (User.IsInRole("Student"))
{
    <div class="row">
        <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Classroom</p>
                                <h5 class="font-weight-bolder">
                                    @Model.Student.TotalClassroom
                                </h5>
                                <p class="mb-0">
                                    Attended classroom
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-primary shadow-primary text-center rounded-circle">
                                <i class="ni ni-hat-3 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Task</p>
                                <h5 class="font-weight-bolder">
                                    @Model.Student.TotalAssignment
                                </h5>
                                <p class="mb-0">
                                    Total of task given
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-warning shadow-danger text-center rounded-circle">
                                <i class="ni ni-archive-2 text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-sm-6 mb-xl-0 mb-4">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Submitted</p>
                                <h5 class="font-weight-bolder">
                                    @Model.Student.TotalSubmitted
                                </h5>
                                <p class="mb-0">
                                    Total task submitted
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-success shadow-success text-center rounded-circle">
                                <i class="fa fa-check text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-3 col-sm-6">
            <div class="card">
                <div class="card-body p-3">
                    <div class="row">
                        <div class="col-8">
                            <div class="numbers">
                                <p class="text-sm mb-0 text-uppercase font-weight-bold">Graded</p>
                                <h5 class="font-weight-bolder">
                                    @Model.Student.TotalGraded
                                </h5>
                                <p class="mb-0">
                                    Total task has been graded
                                </p>
                            </div>
                        </div>
                        <div class="col-4 text-end">
                            <div class="icon icon-shape bg-gradient-info shadow-warning text-center rounded-circle">
                                <i class="fas fa-user-edit text-lg opacity-10" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="row mt-4">
        <div class="col-lg-7 mb-lg-0 mb-4">
            <div class="card z-index-2 h-100">
                <div class="card-header pb-0 pt-3 bg-transparent">
                    <h6 class="text-capitalize">Recently graded</h6>
                </div>
                <div class="card-body p-3">
                    <div class="chart chart-container" style="position: relative;">
                        @if (Model.Student.LatestGraded.Any())
                        {
                            <canvas id="chart-recent-grade" class="chart-canvas"></canvas>
                        }
                        else
                        {
                            <h3>No recent grade</h3>
                        }
                    </div>
                    @if (Model.Student.LatestGraded.Any())
                    {
                        <div class="d-flex justify-content-around" style="width:100%;">
                            <p style="font-size:14px"><i class="fas fa-arrow-left fa-xs"></i> Newest</p>
                            <p style="font-size:14px">Oldest <i class="fas fa-arrow-right fa-xs"></i></p>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="col-lg-5">
            <div class="card z-index-2 h-100">
                <div class="card-header pb-0 pt-3 bg-transparent">
                    <h6 class="text-capitalize">Passed Grade (Score 70 to passed)</h6>
                </div>
                <div class="card-body p-3">
                    <div class="chart chart-container" style="position: relative;">
                        @if (Model.Student.LatestGraded.Any())
                        {
                            <canvas id="chart-passed-grade" class="chart-canvas"></canvas>
                        }
                        else
                        {
                            <h3>No recent grade</h3>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    @if (User.IsInRole("Teacher") && Model.Teacher.AverageGrade.Any())
    {
        <script>
            var avgGradedLabel = JSON.parse('@Html.Raw(Json.Serialize(Model.Teacher.ClassNameAverageGrade))');
            var avgGraded = JSON.parse('@Html.Raw(Json.Serialize(Model.Teacher.AverageGrade))');
            const avgGradeChart = $('#chart-average-grade');
            new Chart(avgGradeChart, {
                type: 'line',
                data: {
                    labels: avgGradedLabel,
                    datasets: [{
                        label: 'Average Grade',
                        data: avgGraded,
                        fill: false,
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                },
            });

            const avgGradePassedChart = $('#chart-passed-avg-grade');
            new Chart(avgGradePassedChart, {
                type: 'pie',
                data: {
                    labels: [
                        'Passed',
                        'Not Passed',
                    ],
                    datasets: [{
                        label: 'Count',
                        data: [@Model.Teacher.AverageGradePassed, @Model.Teacher.AverageGradeNotPassed],
                        backgroundColor: [
                            'rgb(25, 135, 84)',
                            'rgb(255, 99, 132)'
                        ]
                    }]
                },
                options: {}
            });
        </script>
    }

    @if (User.IsInRole("Student") && Model.Student.LatestGraded.Any())
    {

        //student chart
        <script>
            @*chart recent grade*@
            var taskGradedLabel = JSON.parse('@Html.Raw(Json.Serialize(Model.Student.LatestTaskName))');
            var taskGraded = JSON.parse('@Html.Raw(Json.Serialize(Model.Student.LatestGraded))');
            const recentGradeChart = $('#chart-recent-grade');
            new Chart(recentGradeChart, {
                type: 'line',
                data: {
                    labels: taskGradedLabel,
                    datasets: [{
                        label: 'Grade',
                        data: taskGraded,
                        fill: false,
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                },
            });

            const gradePassedChart = $('#chart-passed-grade');
            new Chart(gradePassedChart, {
                type: 'pie',
                data : {
                    labels: [
                        'Passed',
                        'Not Passed',
                    ],
                    datasets: [{
                        label: 'Count',
                        data: [@Model.Student.GradePassed, @Model.Student.GradeNotPassed],
                        backgroundColor: [
                            'rgb(25, 135, 84)',
                            'rgb(255, 99, 132)'
                        ]
                    }]
                },
                options: {}
            });
        </script>

    }
}
